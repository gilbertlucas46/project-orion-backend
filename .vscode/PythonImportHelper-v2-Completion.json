[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Employer",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobApplication",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Employer",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Price",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Addon",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobApplication",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Employer",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobApplication",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Employer",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "employers_data",
        "importPath": "app.db.data",
        "description": "app.db.data",
        "isExtraImport": true,
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "jobs_data",
        "importPath": "app.db.data",
        "description": "app.db.data",
        "isExtraImport": true,
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "users_data",
        "importPath": "app.db.data",
        "description": "app.db.data",
        "isExtraImport": true,
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "applications_data",
        "importPath": "app.db.data",
        "description": "app.db.data",
        "isExtraImport": true,
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "graphene",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "graphene",
        "description": "graphene",
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "InputObjectType",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "ObjectType",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "ObjectType",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "ObjectType",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Int",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "InputObjectType",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "graphene",
        "description": "graphene",
        "isExtraImport": true,
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "AccountRoleEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "ServiceTypeEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "StatusEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "ServiceTypeEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "ServiceTypeGQLEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "AccountRoleEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "AccountRoleGQLEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "StatusEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "StatusGQLEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "AccountRoleGQLEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "StatusGQLEnum",
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "isExtraImport": true,
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "EmployerObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "PostObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "AddonObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "PriceObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "ImageObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "UserObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobApplicationObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "UserObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "EmployerObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "UserObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobApplicationObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "PostObject",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "AuthenticatedItemUnion",
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "isExtraImport": true,
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "prepare_database",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "admin_user",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "admin_user",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user_same_as",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user_same_as",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user_same_as_id",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_authenticated_user",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "admin_user",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_authenticated_user",
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "isExtraImport": true,
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "GraphQLError",
        "importPath": "graphql",
        "description": "graphql",
        "isExtraImport": true,
        "detail": "graphql",
        "documentation": {}
    },
    {
        "label": "GraphQLError",
        "importPath": "graphql",
        "description": "graphql",
        "isExtraImport": true,
        "detail": "graphql",
        "documentation": {}
    },
    {
        "label": "VerifyMismatchError",
        "importPath": "argon2.exceptions",
        "description": "argon2.exceptions",
        "isExtraImport": true,
        "detail": "argon2.exceptions",
        "documentation": {}
    },
    {
        "label": "VerifyMismatchError",
        "importPath": "argon2.exceptions",
        "description": "argon2.exceptions",
        "isExtraImport": true,
        "detail": "argon2.exceptions",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "AddJob",
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "isExtraImport": true,
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateJob",
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "isExtraImport": true,
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "DeleteJob",
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "isExtraImport": true,
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "AddPost",
        "importPath": "app.gql.post.mutations",
        "description": "app.gql.post.mutations",
        "isExtraImport": true,
        "detail": "app.gql.post.mutations",
        "documentation": {}
    },
    {
        "label": "AddEmployer",
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "isExtraImport": true,
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateEmployer",
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "isExtraImport": true,
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "DeleteEmployer",
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "isExtraImport": true,
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "isExtraImport": true,
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "AddUser",
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "isExtraImport": true,
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "ApplyToJob",
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "isExtraImport": true,
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "isExtraImport": true,
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "PasswordHasher",
        "importPath": "argon2",
        "description": "argon2",
        "isExtraImport": true,
        "detail": "argon2",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "GraphQLApp",
        "importPath": "starlette_graphene3",
        "description": "starlette_graphene3",
        "isExtraImport": true,
        "detail": "starlette_graphene3",
        "documentation": {}
    },
    {
        "label": "make_playground_handler",
        "importPath": "starlette_graphene3",
        "description": "starlette_graphene3",
        "isExtraImport": true,
        "detail": "starlette_graphene3",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "app.gql.queries",
        "description": "app.gql.queries",
        "isExtraImport": true,
        "detail": "app.gql.queries",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "importPath": "app.gql.mutations",
        "description": "app.gql.mutations",
        "isExtraImport": true,
        "detail": "app.gql.mutations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.39b7ff600402_initial",
        "description": "alembic.versions.39b7ff600402_initial",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('images', sa.Column('imageUrl', sa.String(), nullable=True))\n    op.drop_column('images', 'image_url')\n    # op.add_column('posts', sa.Column('serviceType', sa.Enum('CAR_WASH', 'EXTERIOR_DETAILING', 'GLASS_DETAILING', 'INTERIOR_DETAILING', 'COLOR_CORRECTION', 'HEADLIGHT_RESTORATION', name='servicetypeenum'), nullable=True))\n    op.drop_column('posts', 'title')\n    op.add_column('prices', sa.Column(\n        'vehicleType', sa.String(), nullable=True))\n    op.drop_column('prices', 'vehicle_type')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.39b7ff600402_initial",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.39b7ff600402_initial",
        "description": "alembic.versions.39b7ff600402_initial",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('prices', sa.Column('vehicle_type',\n                  sa.VARCHAR(), autoincrement=False, nullable=True))\n    op.drop_column('prices', 'vehicleType')\n    op.add_column('posts', sa.Column('title', sa.VARCHAR(),\n                  autoincrement=False, nullable=True))\n    op.drop_column('posts', 'serviceType')\n    op.add_column('images', sa.Column('image_url', sa.VARCHAR(),\n                  autoincrement=False, nullable=True))",
        "detail": "alembic.versions.39b7ff600402_initial",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "description": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.execute(\"CREATE TYPE servicetypeenum AS ENUM ('CAR_WASH', 'EXTERIOR_DETAILING', 'GLASS_DETAILING', 'INTERIOR_DETAILING', 'COLOR_CORRECTION', 'HEADLIGHT_RESTORATION');\")\n    op.add_column('posts', sa.Column('serviceType', sa.Enum('CAR_WASH', 'EXTERIOR_DETAILING', 'GLASS_DETAILING',\n                  'INTERIOR_DETAILING', 'COLOR_CORRECTION', 'HEADLIGHT_RESTORATION', name='servicetypeenum'), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.execute(\"DROP TYPE servicetypeenum;\")\n    op.drop_column('posts', 'serviceType')",
        "detail": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "description": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.execute(\"DROP TYPE servicetypeenum;\")\n    op.drop_column('posts', 'serviceType')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5fc084b75d28_add_servicetypeenum_enum",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "description": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "description": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6fd5a0cea863_add_servicetypeenum_enum2",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Here, we directly set the value in the Alembic config object\nDB_URL = os.environ.get(\"DB_URL\")\nconnection_string = DB_URL\nconfig = context.config\nconfig.set_main_option('sqlalchemy.url', connection_string)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_URL = os.environ.get(\"DB_URL\")\nconnection_string = DB_URL\nconfig = context.config\nconfig.set_main_option('sqlalchemy.url', connection_string)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "connection_string",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "connection_string = DB_URL\nconfig = context.config\nconfig.set_main_option('sqlalchemy.url', connection_string)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option('sqlalchemy.url', connection_string)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "employers_data",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "employers_data = [\n    {\"name\": \"MetaTechA\", \"contact_email\": \"contact@company-a.com\", \"industry\": \"Tech\"},\n    {\"name\": \"MoneySoftB\", \"contact_email\": \"contact@company-b.com\", \"industry\": \"Finance\"},\n]\njobs_data = [\n    {\"title\": \"Software Engineer\",\n        \"description\": \"Develop web applications\", \"employer_id\": 1},\n    {\"title\": \"Data Analyst\",\n        \"description\": \"Analyze data and create reports\", \"employer_id\": 1},\n    {\"title\": \"Accountant II\", \"description\": \"Manage financial records\", \"employer_id\": 2},",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "jobs_data",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "jobs_data = [\n    {\"title\": \"Software Engineer\",\n        \"description\": \"Develop web applications\", \"employer_id\": 1},\n    {\"title\": \"Data Analyst\",\n        \"description\": \"Analyze data and create reports\", \"employer_id\": 1},\n    {\"title\": \"Accountant II\", \"description\": \"Manage financial records\", \"employer_id\": 2},\n    {\"title\": \"Manager\", \"description\": \"Manage people who manage records\", \"employer_id\": 2},\n]\nusers_data = [\n    {\"username\": \"mia\", \"email\": \"mia@email.com\",",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "users_data",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "users_data = [\n    {\"username\": \"mia\", \"email\": \"mia@email.com\",\n        \"password\": \"password\"},\n    {\"username\": \"gilbert\", \"email\": \"gilbert@email.com\",\n        \"password\": \"password\"},\n    {\"username\": \"willow\", \"email\": \"willow@email.com\",\n        \"password\": \"password\"}\n]\napplications_data = [\n    {\"user_id\": 1, \"job_id\": 1},",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "applications_data",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "applications_data = [\n    {\"user_id\": 1, \"job_id\": 1},\n    {\"user_id\": 2, \"job_id\": 2},\n    {\"user_id\": 2, \"job_id\": 3},\n    {\"user_id\": 1, \"job_id\": 4}\n]\ncompanies = [\n    {\n        \"id\": 1,\n        \"name\": \"88 car wash\",",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "companies",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "companies = [\n    {\n        \"id\": 1,\n        \"name\": \"88 car wash\",\n        \"about\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquid veritatis animi numquam! Mollitia facere, excepturi dolor\",\n        \"logo\": \"https://cdn.worldvectorlogo.com/logos/lorem-lorem.svg\",\n        \"address\": \"Mandaluyong, Metro Manila, Philippines\"\n    }\n]\nvehicle_types = [",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "vehicle_types",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "vehicle_types = [\n    {\"name\": \"sedan\"},\n    {\"name\": \"hatchback\"},\n    {\"name\": \"pickup\"},\n    {\"name\": \"suv\"},\n    {\"name\": \"van\"},\n    {\"name\": \"close van\"},\n    {\"name\": \"caravan\"},\n    {\"name\": \"motorcycle\"}\n]",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "posts",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "posts = [\n    {\n        \"id\": 1,\n        \"title\": \"88 car wash\",\n        \"description\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquid veritatis animi numquam! Mollitia facere, excepturi dolore, dicta ullam harum nemo autem ipsam reiciendis, a eligendi qui at maxime nihil ipsum!\",\n        \"rating\": 4.5,\n        \"booking_count\": 11,\n        \"company_id\": 1,  # Connect the post to a company using the company_id\n        \"user_profile_id\": 1,\n        \"prices\": [",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "reviews",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "reviews = [\n    {\n        \"username\": \"Ronnel Anthony\",\n        \"message\": \"We had a very awesome stay in this place. The unit is complete with everything you need even first aid kit. The location is perfect, the room is equipped and clean. The host is very…\",\n        \"post_id\": 1,  # Connect the review to a post using the post_id\n    }\n]\nbookings = [\n    {\n        \"booking_id\": 1,",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "bookings",
        "kind": 5,
        "importPath": "app.db.data",
        "description": "app.db.data",
        "peekOfCode": "bookings = [\n    {\n        \"booking_id\": 1,\n        \"post_id\": 1,\n        \"user_profile_id\": 1,  # Connect the booking to a user profile using the user_profile_id\n        \"user_name\": \"John Doe\",\n        \"booking_date\": \"2023-11-15\",\n        \"vehicle_type\": \"sedan\",\n        \"price\": 300.00,\n        \"status\": \"confirmed\",",
        "detail": "app.db.data",
        "documentation": {}
    },
    {
        "label": "prepare_database",
        "kind": 2,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "def prepare_database():\n    from app.utils.utils import hash_password\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    session = Session()\n    for employer in employers_data:\n        #create a new instance of employer\n        emp = Employer(**employer) # \"**\" destructure/spread the object\n        #add it to the session\n        session.add(emp)",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "DB_URL = os.getenv(\"DB_URL\")\nengine = create_engine(DB_URL, echo=True)\nSession = sessionmaker(bind=engine)\n# database helper\n# drops all the table if any exists\ndef prepare_database():\n    from app.utils.utils import hash_password\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    session = Session()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "engine = create_engine(DB_URL, echo=True)\nSession = sessionmaker(bind=engine)\n# database helper\n# drops all the table if any exists\ndef prepare_database():\n    from app.utils.utils import hash_password\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    session = Session()\n    for employer in employers_data:",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "Session = sessionmaker(bind=engine)\n# database helper\n# drops all the table if any exists\ndef prepare_database():\n    from app.utils.utils import hash_password\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    session = Session()\n    for employer in employers_data:\n        #create a new instance of employer",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Employer",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Employer(Base):\n    __tablename__ = \"employers\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    # autoincrement=True so everytime a db insert happens the id auto increment without us needing to specify\n    name = Column(String)\n    contact_email = Column(String)\n    industry = Column(String)\n    jobs = relationship(\"Job\", back_populates=\"employer\", lazy=\"joined\")\nclass Job(Base):\n    __tablename__ = \"jobs\"",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Job(Base):\n    __tablename__ = \"jobs\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String)\n    description = Column(String)\n    employer_id = Column(Integer, ForeignKey(\"employers.id\"))\n    employer = relationship(\"Employer\", back_populates=\"jobs\", lazy=\"joined\")\n    applications = relationship(\n        \"JobApplication\", back_populates=\"job\", lazy=\"joined\")\nclass User(Base):",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String)\n    email = Column(String)\n    password_hash = Column(String)\n    role = Column(Enum(AccountRoleEnum),\n                  default=AccountRoleEnum.USER, nullable=False)\n    # use the Enum type directly from SQLAlchemy and set nullable=False instead of\n    # nullable=True to ensure that the status column is not nullable since we set a default value",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobApplication",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class JobApplication(Base):\n    __tablename__ = 'job_applications'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    job_id = Column(Integer, ForeignKey(\"jobs.id\"))\n    user = relationship(\"User\", back_populates=\"applications\", lazy=\"joined\")\n    job = relationship(\"Job\", back_populates=\"applications\", lazy=\"joined\")\nclass Post(Base):\n    __tablename__ = 'posts'\n    id = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = 'posts'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    serviceType = Column(Enum(ServiceTypeEnum),\n                         default=ServiceTypeEnum.CAR_WASH, nullable=True)\n    description = Column(String)\n    rating = Column(Float)\n    booking_count = Column(Integer)\n    user = relationship(\"User\", back_populates=\"posts\", lazy=\"joined\")",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Price",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Price(Base):\n    __tablename__ = 'prices'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    post_id = Column(Integer, ForeignKey('posts.id'))\n    vehicleType = Column(String)\n    price = Column(Float)\n    post = relationship(\"Post\", back_populates=\"prices\")\nclass Image(Base):\n    __tablename__ = 'images'\n    id = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Image(Base):\n    __tablename__ = 'images'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    post_id = Column(Integer, ForeignKey('posts.id'))\n    imageUrl = Column(String)\n    post = relationship(\"Post\", back_populates=\"images\")\nclass Addon(Base):\n    __tablename__ = 'addons'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    post_id = Column(Integer, ForeignKey('posts.id'))",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Addon",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Addon(Base):\n    __tablename__ = 'addons'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    post_id = Column(Integer, ForeignKey('posts.id'))\n    name = Column(String)\n    description = Column(String)\n    price = Column(Float)\n    post = relationship(\"Post\", back_populates=\"addons\")",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "Base = declarative_base()\n# lazy=\"joined\" it specifies SQLAlchemy that we want to load the relational attributes\n# meaning do not lazily evaluate the do not wait.\nclass Employer(Base):\n    __tablename__ = \"employers\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    # autoincrement=True so everytime a db insert happens the id auto increment without us needing to specify\n    name = Column(String)\n    contact_email = Column(String)\n    industry = Column(String)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "AddEmployer",
        "kind": 6,
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "peekOfCode": "class AddEmployer(Mutation):\n    class Arguments:\n        name = String(required=True)\n        contact_email = String(required=True)\n        industry = String(required=True)\n    employer = Field(lambda: EmployerObject)\n    authenticated_as = Field(String)\n    @admin_user\n    def mutate(root, info, contact_email, industry):\n        session = Session()",
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateEmployer",
        "kind": 6,
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "peekOfCode": "class UpdateEmployer(Mutation):\n    class Arguments:\n        employer_id = Int(required=True)\n        name = String()\n        contact_email = String()\n        industry = String()\n    employer = Field(lambda: EmployerObject)\n    @admin_user\n    def mutate(root, info, employer_id, name=None, contact_email=None, industry=None):\n        session = Session()",
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "DeleteEmployer",
        "kind": 6,
        "importPath": "app.gql.employer.mutations",
        "description": "app.gql.employer.mutations",
        "peekOfCode": "class DeleteEmployer(Mutation):\n    class Arguments:\n        id = Int(required=True)\n    success = Boolean()\n    @admin_user\n    def mutate(root, info, id):\n        session = Session()\n        employer = session.query(Employer).filter(Employer.id == id).first()\n        if not employer:\n            raise Exception(\"Job not found\")",
        "detail": "app.gql.employer.mutations",
        "documentation": {}
    },
    {
        "label": "AddJob",
        "kind": 6,
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "peekOfCode": "class AddJob(Mutation):\n    class Arguments:\n        title = String(required=True)\n        description = String(required=True)\n        employer_id = Int(required=True)\n    job = Field(lambda: JobObject)\n    @admin_user\n    def mutate(root, info, title, description, employer_id):\n        job = Job(title=title, description=description,\n                  employer_id=employer_id)  # add this job to the session",
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateJob",
        "kind": 6,
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "peekOfCode": "class UpdateJob(Mutation):\n    class Arguments:\n        job_id = Int(required=True)\n        title = String()\n        description = String()\n        employer_id = Int()\n    job = Field(lambda: JobObject)\n    @admin_user\n    def mutate(root, info, job_id, title=None, description=None, employer_id=None):\n        session = Session()",
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "DeleteJob",
        "kind": 6,
        "importPath": "app.gql.job.mutations",
        "description": "app.gql.job.mutations",
        "peekOfCode": "class DeleteJob(Mutation):\n    class Arguments:\n        id = Int(required=True)\n    success = Boolean()\n    @admin_user\n    def mutate(root, info, id):\n        session = Session()\n        job = session.query(Job).filter(Job.id == id).first()\n        if not job:\n            raise Exception(\"Job not found\")",
        "detail": "app.gql.job.mutations",
        "documentation": {}
    },
    {
        "label": "AddPost",
        "kind": 6,
        "importPath": "app.gql.post.mutations",
        "description": "app.gql.post.mutations",
        "peekOfCode": "class AddPost(Mutation):\n    class Arguments:\n        user_id = Int(required=True)\n        serviceType = ServiceTypeGQLEnum(\n            default_value=ServiceTypeEnum.CAR_WASH)\n        description = String()\n        rating = Float()\n        booking_count = Int()\n        prices = List(PriceObject)\n        images = List(ImageObject)",
        "detail": "app.gql.post.mutations",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "kind": 6,
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "peekOfCode": "class LoginUser(Mutation):\n    class Arguments:\n        email = String()\n        password = String()\n    token = String()\n    @staticmethod\n    def mutate(root, info, email, password):\n        session = Session()\n        user = session.query(User).filter(User.email == email).first()\n        if not user:",
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "AddUser",
        "kind": 6,
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "peekOfCode": "class AddUser(Mutation):\n    class Arguments:\n        username = String(required=True)\n        email = String(required=True)\n        password = String(required=True)\n        role = AccountRoleGQLEnum(default_value=AccountRoleEnum.USER)\n        status = StatusGQLEnum(default_value=StatusEnum.PENDING)\n    user = Field(lambda: UserObject)\n    @staticmethod\n    def mutate(root, info, username, email, password, role, status):",
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "kind": 6,
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "peekOfCode": "class UpdateUser(Mutation):\n    class Arguments:\n        id = Int(required=True)\n        companyName = String()\n        email = String()\n        firstName = String()\n        lastName = String()\n        facebookLink = String()\n        address = String()\n        phoneNumber = String()",
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "ApplyToJob",
        "kind": 6,
        "importPath": "app.gql.user.mutations",
        "description": "app.gql.user.mutations",
        "peekOfCode": "class ApplyToJob(Mutation):\n    class Arguments:\n        user_id = Int(required=True)\n        job_id = Int(required=True)\n    # It returns a job application field\n    job_application = Field(lambda: JobApplicationObject)\n    @authd_user_same_as\n    def mutate(root, info, user_id, job_id):\n        session = Session()\n        # check first if the job already exist",
        "detail": "app.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "StatusEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class StatusEnum(Enum):\n    PENDING = \"PENDING\"\n    VERIFIED = \"VERIFIED\"\n    DISABLED = \"DISABLED\"\nclass StatusGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"StatusEnum\"\n    PENDING = StatusEnum.PENDING\n    VERIFIED = StatusEnum.VERIFIED\n    DISABLED = StatusEnum.DISABLED",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "StatusGQLEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class StatusGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"StatusEnum\"\n    PENDING = StatusEnum.PENDING\n    VERIFIED = StatusEnum.VERIFIED\n    DISABLED = StatusEnum.DISABLED\nclass AccountRoleEnum(Enum):\n    USER = \"USER\"\n    SERVICE_PROVIDER = \"SERVICE_PROVIDER\"\n    ADMIN = \"ADMIN\"",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "AccountRoleEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class AccountRoleEnum(Enum):\n    USER = \"USER\"\n    SERVICE_PROVIDER = \"SERVICE_PROVIDER\"\n    ADMIN = \"ADMIN\"\n    EDITOR = \"EDITOR\"\nclass AccountRoleGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"AccountRoleEnum\"\n    USER = AccountRoleEnum.USER\n    SERVICE_PROVIDER = AccountRoleEnum.SERVICE_PROVIDER",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "AccountRoleGQLEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class AccountRoleGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"AccountRoleEnum\"\n    USER = AccountRoleEnum.USER\n    SERVICE_PROVIDER = AccountRoleEnum.SERVICE_PROVIDER\n    ADMIN = AccountRoleEnum.ADMIN\n    EDITOR = AccountRoleEnum.EDITOR\nclass ServiceTypeEnum(Enum):\n    CAR_WASH = \"Car wash\"\n    EXTERIOR_DETAILING = \"Exterior detailing\"",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "ServiceTypeEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class ServiceTypeEnum(Enum):\n    CAR_WASH = \"Car wash\"\n    EXTERIOR_DETAILING = \"Exterior detailing\"\n    GLASS_DETAILING = \"Glass detailing\"\n    INTERIOR_DETAILING = \"Interior detailing\"\n    COLOR_CORRECTION = \"Color Correction\"\n    HEADLIGHT_RESTORATION = \"Headlight Restoration\"\nclass ServiceTypeGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"ServiceTypeEnum\"",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "ServiceTypeGQLEnum",
        "kind": 6,
        "importPath": "app.gql.enums",
        "description": "app.gql.enums",
        "peekOfCode": "class ServiceTypeGQLEnum(graphene.Enum):\n    class Meta:\n        name = \"ServiceTypeEnum\"\n    CAR_WASH = ServiceTypeEnum.CAR_WASH\n    EXTERIOR_DETAILING = ServiceTypeEnum.EXTERIOR_DETAILING\n    GLASS_DETAILING = ServiceTypeEnum.GLASS_DETAILING\n    INTERIOR_DETAILING = ServiceTypeEnum.INTERIOR_DETAILING\n    COLOR_CORRECTION = ServiceTypeEnum.COLOR_CORRECTION\n    HEADLIGHT_RESTORATION = ServiceTypeEnum.HEADLIGHT_RESTORATION",
        "detail": "app.gql.enums",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "kind": 6,
        "importPath": "app.gql.mutations",
        "description": "app.gql.mutations",
        "peekOfCode": "class Mutation(ObjectType):\n    add_job = AddJob.Field()\n    update_job = UpdateJob.Field()\n    delete_job = DeleteJob.Field()\n    add_employer = AddEmployer.Field()\n    update_employer = UpdateEmployer.Field()\n    delete_employer = DeleteEmployer.Field()\n    login_user = LoginUser.Field()\n    add_user = AddUser.Field()\n    apply_to_jobs = ApplyToJob.Field()",
        "detail": "app.gql.mutations",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "app.gql.queries",
        "description": "app.gql.queries",
        "peekOfCode": "class Query(ObjectType):\n    jobs = List(JobObject)\n    job = Field(JobObject, id=Int(required=True))\n    employers = List(EmployerObject)\n    employer = Field(EmployerObject, id=Int(required=True))\n    users = List(UserObject)\n    job_applications = List(JobApplicationObject)\n    posts = List(PostObject)\n    post = Field(PostObject, id=Int(required=True))\n    authenticated_item = Field(AuthenticatedItemUnion)",
        "detail": "app.gql.queries",
        "documentation": {}
    },
    {
        "label": "EmployerObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class EmployerObject(ObjectType):\n    id = Int()\n    name = String()\n    contact_email = String()\n    industry = String()\n    jobs = List(lambda: JobObject)  # \"lambda\" defer undefined class names\n    @staticmethod\n    def resolve_jobs(root, info):\n        return root.jobs\nclass JobObject(ObjectType):",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class JobObject(ObjectType):\n    id = Int()\n    title = String()\n    description = String()\n    employer_id = Int()\n    # a job is associated with a single employer\n    employer = Field(lambda: EmployerObject)\n    # The next() function is used to retrieve the next item from\n    # the iterable created by the generator expression. In this case, it will\n    # return the first employer that matches the condition.",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "UserObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class UserObject(ObjectType):\n    id = Int()\n    username = String()\n    email = String()\n    role = Field(AccountRoleGQLEnum)\n    status = Field(StatusGQLEnum)\n    companyName = String()\n    firstName = String()\n    lastName = String()\n    facebookLink = String()",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "AuthenticatedItemUnion",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class AuthenticatedItemUnion(Union):\n    class Meta:\n        types = (UserObject,)\n    @staticmethod\n    def resolve_type(instance, info):\n        if isinstance(instance, User):\n            return UserObject\n        # Add other types as needed\n        raise Exception('Unknown type')\nclass JobApplicationObject(ObjectType):",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "JobApplicationObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class JobApplicationObject(ObjectType):\n    id = Int()\n    user_id = Int()\n    job_id = Int()\n    user = Field(lambda: UserObject)\n    job = Field(lambda: JobObject)\n    @staticmethod\n    def resolve_user(root, info):\n        return root.user\n    @staticmethod",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "PriceObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class PriceObject(InputObjectType):\n    vehicleType = String()\n    price = Float()\nclass ImageObject(InputObjectType):\n    imageUrl = String()\nclass AddonObject(InputObjectType):\n    name = String()\n    description = String()\n    price = Float()\nclass PostObject(ObjectType):",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "ImageObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class ImageObject(InputObjectType):\n    imageUrl = String()\nclass AddonObject(InputObjectType):\n    name = String()\n    description = String()\n    price = Float()\nclass PostObject(ObjectType):\n    userId = Int()\n    id = Int()\n    title = String()",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "AddonObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class AddonObject(InputObjectType):\n    name = String()\n    description = String()\n    price = Float()\nclass PostObject(ObjectType):\n    userId = Int()\n    id = Int()\n    title = String()\n    description = String()\n    rating = Float()",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "PostObject",
        "kind": 6,
        "importPath": "app.gql.types",
        "description": "app.gql.types",
        "peekOfCode": "class PostObject(ObjectType):\n    userId = Int()\n    id = Int()\n    title = String()\n    description = String()\n    rating = Float()\n    booking_count = Int()",
        "detail": "app.gql.types",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def generate_token(email, user_id):\n    # now + token lifespan\n    expiration_time = datetime.utcnow() + timedelta(minutes=TOKEN_EXPIRATION_TIME_MINUTES)\n    payload = {\n        \"id\": user_id,\n        \"sub\": email,\n        \"exp\": expiration_time,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\n    return token",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_authenticated_user",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def get_authenticated_user(context):\n    # On every request that our graphql server receives\n    # as some context information about that contains\n    # the execution context in which that request was made.\n    # from there we'll be able to access the request object,\n    # the full HTTP request object, and from that request object we'll\n    # extract the authorization header.\n    request_object = context.get('request')\n    auth_header = request_object.headers.get('Authorization')\n    token = [None]",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def hash_password(pwd):\n    ph = PasswordHasher()\n    return ph.hash(pwd)\ndef verify_password(pwd_hash, pwd):\n    ph = PasswordHasher()\n    try:\n        ph.verify(pwd_hash, pwd)\n        # from the user instance that we got from the database\n        # lets get the password_hash and verify that it is consistent with the \"password\"\n        # that the user provided",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def verify_password(pwd_hash, pwd):\n    ph = PasswordHasher()\n    try:\n        ph.verify(pwd_hash, pwd)\n        # from the user instance that we got from the database\n        # lets get the password_hash and verify that it is consistent with the \"password\"\n        # that the user provided\n    except VerifyMismatchError:\n        raise GraphQLError(\"Invalid password\")\ndef admin_user(func):",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "admin_user",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def admin_user(func):\n    # Note: 💁 when we wrapped the function with our decorator\n    # it looses its original name & docstring which makes problematic\n    # including debugging and investigating error messages\n    # Its a good practice to copy the to copy the name, docstring as well as the\n    # other meta data from the original function to the wrapped function\n    # one elegant way to do it is to use functools module \"@wraps\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        # /single asterisk(positional) double asterisk keyword arguments respectively",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def authd_user(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        info = args[1]\n        get_authenticated_user(info.context)\n        return func(*args, **kwargs)\n    return wrapper\ndef authd_user_same_as(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user_same_as",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def authd_user_same_as(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        info = args[1]\n        user = get_authenticated_user(info.context)\n        uid = kwargs.get(\"user_id\")\n        if user.id != uid:\n            raise GraphQLError(\"You are not authorized to perform this action\")\n        return func(*args, **kwargs)\n    return wrapper",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "authd_user_same_as_id",
        "kind": 2,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "def authd_user_same_as_id(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        info = args[1]\n        user = get_authenticated_user(info.context)\n        user_id = kwargs.get(\"id\")\n        if user.id != user_id:\n            raise GraphQLError(\"You are not authorized to perform this action\")\n        return func(*args, **kwargs)\n    return wrapper",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\nALGORITHM = os.getenv(\"ALGORITHM\")\nTOKEN_EXPIRATION_TIME_MINUTES = int(os.getenv(\"TOKEN_EXPIRATION_TIME_MINUTES\"))\ndef generate_token(email, user_id):\n    # now + token lifespan\n    expiration_time = datetime.utcnow() + timedelta(minutes=TOKEN_EXPIRATION_TIME_MINUTES)\n    payload = {\n        \"id\": user_id,\n        \"sub\": email,\n        \"exp\": expiration_time,",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "ALGORITHM = os.getenv(\"ALGORITHM\")\nTOKEN_EXPIRATION_TIME_MINUTES = int(os.getenv(\"TOKEN_EXPIRATION_TIME_MINUTES\"))\ndef generate_token(email, user_id):\n    # now + token lifespan\n    expiration_time = datetime.utcnow() + timedelta(minutes=TOKEN_EXPIRATION_TIME_MINUTES)\n    payload = {\n        \"id\": user_id,\n        \"sub\": email,\n        \"exp\": expiration_time,\n    }",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "TOKEN_EXPIRATION_TIME_MINUTES",
        "kind": 5,
        "importPath": "app.utils.utils",
        "description": "app.utils.utils",
        "peekOfCode": "TOKEN_EXPIRATION_TIME_MINUTES = int(os.getenv(\"TOKEN_EXPIRATION_TIME_MINUTES\"))\ndef generate_token(email, user_id):\n    # now + token lifespan\n    expiration_time = datetime.utcnow() + timedelta(minutes=TOKEN_EXPIRATION_TIME_MINUTES)\n    payload = {\n        \"id\": user_id,\n        \"sub\": email,\n        \"exp\": expiration_time,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.utils.utils",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "schema = Schema(query=Query, mutation=Mutation)\napp = FastAPI()\n# FastAPI provides some special decorators to let us hook into the\n# various application events, and one such event is startup, which is triggered\n# when the application, well literally starts up.\n# @app.on_event(\"startup\")\n# def startup_event():\n#     prepare_database()\n# CORS middleware settings\norigins = [",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# FastAPI provides some special decorators to let us hook into the\n# various application events, and one such event is startup, which is triggered\n# when the application, well literally starts up.\n# @app.on_event(\"startup\")\n# def startup_event():\n#     prepare_database()\n# CORS middleware settings\norigins = [\n    \"http://localhost\",    # Adjust the allowed origins as needed",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\n    \"http://localhost\",    # Adjust the allowed origins as needed\n    \"http://localhost:3000\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],",
        "detail": "main",
        "documentation": {}
    }
]